{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"Hexo icarus 테마 커스터마이징 편하게 설치하기","text":"Hexo에 icarus 테마 설치 테마 설치는 npm을 이용한 설치 또는 git clone을 이용한 설치 방식 중 선택할 수 있다. git clone으로 설치해야 직접 소스에 접근하여 코드를 수정하는 커스터마이징이 용이하다. 테마 설치 123cd themesgit clone --depth 1 https://github.com/ppoffice/hexo-theme-icarus.git icarus// --depth 1 옵션으로 마지막 커밋만 받아온다. 테마 적용 _config.yml1theme: icarus 주의사항 테마 폴더에 .git 폴더가 있으면 submodule으로 인식되어 자신의 repository와 연동되지 않는다. 자신의 repository에서 한번에 관리하고 싶다면 테마 폴더의 .git 폴더를 삭제한다. 다만 icarus 테마 업데이트 시 수작업으로 적용해야 한다. 참고자료 Getting Started with Icarus 7.11 Git 도구 - 서브모듈","link":"/2021/09/24/20210924-01/"},{"title":"자바 final 예약어의 사용","text":"Java를 학습하면 언제 final 예약어를 사용하는게 적합한지에 대한 의문이 들게된다.물론 IDE에서는 사용해서는 안되는 경우에 사용했을 때 오류라고 알려주긴 하지만, 언제 사용하는게 적합한지에 대해서는 반드시 학습이 필요하다. final 예약어?자바에서 final 예약어는 클래스, 메서드, 변수 등의 개체와 결합하여 사용할 수 있고 한 번만 할당할 수 있다. 할당 이후 값의 변경이 불가능하다는 것에 초점을 맞춰야 하며 그 사실이 상수화만을 의미하는 것은 절대 아니다. Final classes final 예약어를 클래스에 사용하면 상속이 불가능한 클래스가 만들어진다. 아래 예제에서 ThisIsWrong 클래스는 MyFinalClass를 상속하고자 하지만 이는 불가능하다. 123public final class MyFinalClass {...}public class ThisIsWrong extends MyFinalClass {...} // forbidden Final methods final 예약어를 메서드에 사용하면 하위 클래스에서 재정의 할 수 없다. 아래 예제에서 Base 클래스의 m2 메서드가 final이기 때문에 하위 클래스인 Derived에서 m2 메서드를 재정의(Overriding) 할 수 없다. 1234567891011public class Base{ public void m1() {...} public final void m2() {...}}public class Derived extends Base{ public void m1() {...} // OK, overriding Base#m1() public void m2() {...} // forbidden} Final variables final 예약어를 변수에 사용하면 오직 한 번만 초기화 할 수 있다. 아래 예제에서 Sphere 클래스의 인스턴스 생성 때 매개변수를 이용해 변수를 초기화하면, 그 이후에는 메서드 체이닝으로 변수에 접근하거나 Setter를 호출하더라도 값을 수정할 수 없다. 12345678910111213public class Sphere { public final double radius; public final double xPos; public final double yPos; public final double zPos; Sphere(double x, double y, double z, double r) { radius = r; xPos = x; yPos = y; zPos = z; }} final 예약어의 활용공용 멤버 변수 만들기(상수화)Final variables 예제처럼 인스턴스 생성 시 마다 final 멤버 변수를 초기화하면 각 인스턴스들의 final 변수는 모두 다른 주소 값을 가지고 있을 것이다. 하지만 모든 인스턴스가 동일한 값을 필요로 한다면 static 예약어와 final 예약어를 동시에 사용하여 상수화 할 수 있다. 해당 영역은 컴파일 시에 할당되어 모든 인스턴스가 같은 메모리를 참조한다. 아래는 Subject 클래스를 만들고 최고 점수를 100점으로 상수화 시키는 예제이다. 이를 상속받은 하위 클래스인 Math와 Korean 모두 상수 MAX_SCORE에 접근할 수 있다. 123456789public class Subject { public static final int MAX_SCORE = 100;}public class Math extends Subject {}public class Korean extends Subject {} Util 형식의 클래스 만들기다음은 코어 라이브러리 중 String 클래스의 실제 구현 코드이다. 상속 받아 변형하는 것을 방지하기 위해서 Util 형식의 클래스를 만들 때 final class를 활용할 수 있다. 123456789public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence, Constable, ConstantDesc { @Stable private final byte[] value; private final byte coder; [...]} 템플릿 메서드 패턴(Template Method Pattern) 만들기템플릿 메서드 패턴은(Template Method Pattern)은 추상 클래스(Abstract class)를 만들고 그 내부에 추상 메서드(Abstract method), 훅 메서드(Hook method), final 예약어를 이용한 템플릿 메서드(Template method)를 만들어 전체 알고리즘을 정의하고 각 메서드의 구현은 하위 클래스에 위임하는 방법이다. 설계도라고 할 수 있다. 먼저 추상 클래스를 만들고 템플릿 메서드에 알고리즘을 구현 한다. 12345678910111213public abstract class PlayerLevel { public abstract void run(); // 추상 메서드(Abstract method) public abstract void jump(); public void turn() {}; // 훅 메서드(Hook method) final public void go(int jumpCount) { // 템플릿 메서드(Template method) run(); for (int i = 0; i &lt; jumpCount; i++) { jump(); } turn(); }} 그리고 추상 메서드와 훅 메서드를 구현할 하위 클래스를 만든다. 이 클래스는 Concrete Class, 구상 클래스, 구현 클래스, 구현 클래스 등의 키워드로 설명하곤 한다. 클래스 내부에서는 상위 클래스의 추상 메서드들을 재정의(Overriding)해야만 하고, 훅 메서드는 필요한 경우에만 재정의한다. 아래 예제의 경우 PlayerLevel의 추상 메서드인 run과 jump를 BeginnerLevel, AdvancedLevel 클래스에서 모두 재정의했고, 훅 메서드인 turn의 경우 AdvancedLevel에서만 구현한 것을 확인할 수 있다. 12345678910111213141516171819202122232425262728class BeginnerLevel extends PlayerLevel{ @Override public void run() { System.out.println(&quot;천천히 달립니다.&quot;); } @Override public void jump() { System.out.println(&quot;Jump 할 줄 모르지롱.&quot;); }}class AdvancedLevel extends PlayerLevel{ @Override public void run() { System.out.println(&quot;빨리 달립니다.&quot;); } @Override public void jump() { System.out.println(&quot;높이 Jump 합니다.&quot;); } @Override public void turn() { System.out.println(&quot;한 바퀴 회전합니다.&quot;) }} 참고자료 https://en.wikipedia.org/wiki/Final_(Java) How does the “final” keyword in Java work? - Stack Overflow Do it! 자바 프로그래밍 입문 - inflearn","link":"/2021/09/27/20210927-01/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"final","slug":"final","link":"/tags/final/"}],"categories":[{"name":"Blog","slug":"Blog","link":"/categories/Blog/"},{"name":"Hexo","slug":"Blog/Hexo","link":"/categories/Blog/Hexo/"},{"name":"Born2Code","slug":"Born2Code","link":"/categories/Born2Code/"},{"name":"Java","slug":"Born2Code/Java","link":"/categories/Born2Code/Java/"}]}